// generated by metactl sdk gen 
package transport

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/metamatex/metamate/gen/v0/sdk"
	"net/http"
	"reflect"
	
)

type HttpJsonClient struct {
	opts HttpJsonClientOpts
}

type HttpJsonClientOpts struct {
	HttpClient	*http.Client
	Token	string
	Addr	string
}

func NewHttpJsonClient(opts HttpJsonClientOpts) (Client) {
	return HttpJsonClient{opts: opts}
}

func (c HttpJsonClient) send(req interface{}, rsp interface{}) (err error) {
	b := new(bytes.Buffer)
	err = json.NewEncoder(b).Encode(req)
	if err != nil {
		return
	}

	httpReq, err := http.NewRequest(http.MethodPost, c.opts.Addr, b)
	if err != nil {
		return
	}

	httpReq.Header.Set(ContentTypeHeader, ContentTypeJson)
	httpReq.Header.Set(MetamateTypeHeader, reflect.TypeOf(req).Name())
	httpReq.Header.Set(AuthorizationHeader, "Bearer " + c.opts.Token)

	res, err := c.opts.HttpClient.Do(httpReq)
	if err != nil {
		return
	}

	err = json.NewDecoder(res.Body).Decode(rsp)
	if err != nil {
		return
	}

	return
}
func (c HttpJsonClient) GetBlueWhatevers(ctx context.Context, req sdk.GetBlueWhateversRequest) (rsp *sdk.GetBlueWhateversResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c HttpJsonClient) GetFeeds(ctx context.Context, req sdk.GetFeedsRequest) (rsp *sdk.GetFeedsResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c HttpJsonClient) GetServices(ctx context.Context, req sdk.GetServicesRequest) (rsp *sdk.GetServicesResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c HttpJsonClient) GetSocialAccounts(ctx context.Context, req sdk.GetSocialAccountsRequest) (rsp *sdk.GetSocialAccountsResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c HttpJsonClient) GetStatuses(ctx context.Context, req sdk.GetStatusesRequest) (rsp *sdk.GetStatusesResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c HttpJsonClient) GetWhatevers(ctx context.Context, req sdk.GetWhateversRequest) (rsp *sdk.GetWhateversResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c HttpJsonClient) LookupService(ctx context.Context, req sdk.LookupServiceRequest) (rsp *sdk.LookupServiceResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c HttpJsonClient) PipeWhatevers(ctx context.Context, req sdk.PipeWhateversRequest) (rsp *sdk.PipeWhateversResponse, err error) {
	err = c.send(req, &rsp)

	return
}