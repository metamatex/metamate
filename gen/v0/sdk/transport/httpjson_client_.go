// generated by metactl sdk gen 
package transport

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"reflect"
	"github.com/metamatex/metamatemono/gen/v0/sdk"
)

type HttpJsonClient struct {
	opts HttpJsonClientOpts
}

type HttpJsonClientOpts struct {
	HttpClient	*http.Client
	Token	string
	Addr	string
}

func NewHttpJsonClient(opts HttpJsonClientOpts) (Client) {
	return HttpJsonClient{opts: opts}
}

func (c HttpJsonClient) send(req interface{}, rsp interface{}) (err error) {
	b := new(bytes.Buffer)
	err = json.NewEncoder(b).Encode(req)
	if err != nil {
		return
	}

	httpReq, err := http.NewRequest(http.MethodPost, c.opts.Addr, b)
	if err != nil {
		return
	}

	httpReq.Header.Set(CONTENT_TYPE_HEADER, CONTENT_TYPE_JSON)
	httpReq.Header.Set(METAMATE_TYPE_HEADER, reflect.TypeOf(req).Name())
	httpReq.Header.Set(AUTHORIZATION_HEADER, "Bearer " + c.opts.Token)

	res, err := c.opts.HttpClient.Do(httpReq)
	if err != nil {
		return
	}

	err = json.NewDecoder(res.Body).Decode(rsp)
	if err != nil {
		return
	}

	return
}
func (c HttpJsonClient) PostWhatevers(ctx context.Context, req sdk.PostWhateversRequest) (rsp *sdk.PostWhateversResponse, err error) {
	err = c.send(req, &rsp)

	return
}