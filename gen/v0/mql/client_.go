// generated by metactl sdk gen 
package mql

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"reflect"
)

type Client struct {
	opts ClientOpts
	addr string
}

type ClientOpts struct {
	HttpClient *http.Client
	Host       string
}

func NewClient(opts ClientOpts) Client {
	if opts.HttpClient == nil {
		opts.HttpClient = &http.Client{}
	}

	return Client{opts: opts, addr: opts.Host + "/httpjson"}
}

func (c Client) send(req interface{}, rsp interface{}) (err error) {
	b := new(bytes.Buffer)
	err = json.NewEncoder(b).Encode(req)
	if err != nil {
		return
	}

	httpReq, err := http.NewRequest(http.MethodPost, c.addr, b)
	if err != nil {
		return
	}

	httpReq.Header.Set(ContentTypeHeader, ContentTypeJson)
	httpReq.Header.Set(AsgTypeHeader, reflect.TypeOf(req).Name())

	res, err := c.opts.HttpClient.Do(httpReq)
	if err != nil {
		return
	}

	err = json.NewDecoder(res.Body).Decode(rsp)
	if err != nil {
		return
	}

	return
}
func (c Client) GetBlueDummies(ctx context.Context, req GetBlueDummiesRequest) (rsp *GetBlueDummiesResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) GetDummies(ctx context.Context, req GetDummiesRequest) (rsp *GetDummiesResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) GetPostFeeds(ctx context.Context, req GetPostFeedsRequest) (rsp *GetPostFeedsResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) GetPosts(ctx context.Context, req GetPostsRequest) (rsp *GetPostsResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) GetServices(ctx context.Context, req GetServicesRequest) (rsp *GetServicesResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) GetSocialAccounts(ctx context.Context, req GetSocialAccountsRequest) (rsp *GetSocialAccountsResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) LookupService(ctx context.Context, req LookupServiceRequest) (rsp *LookupServiceResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) PipeDummies(ctx context.Context, req PipeDummiesRequest) (rsp *PipeDummiesResponse, err error) {
	err = c.send(req, &rsp)

	return
}