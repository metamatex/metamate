// generated by metactl sdk gen 
package httpjson

import (
	"bytes"
	"reflect"
	"encoding/json"
	"net/http"
	"context"

	"github.com/metamatex/mastodon-svc/generated/sdk/pkg/v0/sdk"
)

type Client struct {
	client	*http.Client
	token	string
	addr	string
}

func NewClient(c *http.Client, addr string) (Client) {
	return Client{
		client: c,
		addr: addr,
	}
}

func (c Client) send(req interface{}, rsp interface{}) (err error) {
	b := new(bytes.Buffer)
	err = json.NewEncoder(b).Encode(req)
	if err != nil {
		return
	}

	httpReq, err := http.NewRequest(http.MethodPost, c.addr, b)
	if err != nil {
		return
	}

	httpReq.Header.Set(CONTENT_TYPE_HEADER, CONTENT_TYPE_JSON)
	httpReq.Header.Set(METAMATE_TYPE_HEADER, reflect.TypeOf(req).Name())
	httpReq.Header.Set(AUTHORIZATION_HEADER, "Bearer " + c.token)

	res, err := c.client.Do(httpReq)
	if err != nil {
		return
	}

	err = json.NewDecoder(res.Body).Decode(rsp)
	if err != nil {
		return
	}

	return
}
func (c Client) GetPeople(ctx context.Context, req sdk.GetPeopleRequest) (rsp *sdk.GetPeopleResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) GetStatuses(ctx context.Context, req sdk.GetStatusesRequest) (rsp *sdk.GetStatusesResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) PostPeople(ctx context.Context, req sdk.PostPeopleRequest) (rsp *sdk.PostPeopleResponse, err error) {
	err = c.send(req, &rsp)

	return
}
func (c Client) PutPeople(ctx context.Context, req sdk.PutPeopleRequest) (rsp *sdk.PutPeopleResponse, err error) {
	err = c.send(req, &rsp)

	return
}