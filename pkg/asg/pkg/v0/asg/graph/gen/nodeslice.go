package main

import (
	"os"
	"text/template"
)

func main() {
	err := func() (err error) {
		f, err := os.Create("NodeSlice_.go")
		if err != nil {
			return
		}
		defer f.Close()

		err = nodeSliceTemplate.Execute(f, []string{"BasicType", "Endpoint", "Enum", "Field", "Relation", "Type", "Path"})
		if err != nil {
			return
		}

		return
	}()
	if err != nil {
		panic(err)
	}
}

var nodeSliceTemplate = template.Must(template.New("").Parse(
	`// generated by go:generate go run gen/nodeslice.go
package graph

import (
	"sort"
)
{{ range $i, $name := . }}
type {{ $name }}NodeSlice []*{{ $name }}Node

func (nm {{ $name }}NodeSlice) GetIds() (ids []NodeId) {
	for _, n := range nm {
		ids = append(ids, n.Id())
	}

	return
}

func (ns {{ $name }}NodeSlice) Sort() ({{ $name }}NodeSlice) {
	sort.Slice(ns, func(i, j int) bool {
		return ns[i].Namex < ns[j].Namex
	})

	return ns
}

func (ns {{ $name }}NodeSlice) Map() (fnm {{ $name }}NodeMap) {
	fnm = {{ $name }}NodeMap{}

	fnm.Add(ns...)

	return
}
{{ end }}`))
