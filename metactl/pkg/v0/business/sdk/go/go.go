package _go

import (
	"github.com/metamatex/metamatemono/asg/pkg/v0/asg/endpointnames"
	"github.com/metamatex/metamatemono/asg/pkg/v0/asg/graph"
	"github.com/metamatex/metamatemono/asg/pkg/v0/asg/graph/enumflags"
	"github.com/metamatex/metamatemono/metactl/pkg/v0/types"
	"github.com/metamatex/metamatemono/metactl/pkg/v0/utils"
	"github.com/metamatex/metamatemono/metactl/pkg/v0/utils/ptr"
	"github.com/pkg/errors"
	"os"
)

const (
	TaskSetTypes           = "types"
	TaskSetHttpJsonServer  = "httpjsonServer"
	TaskSetHttpJsonClient  = "httpjsonClient"
	TaskSetHttpJson        = "httpjson"
	DependecyRelationNames = "dependencyRelationNames"
	DependecyLookupService = "dependencyLookupService"
)

const (
	SdkTypes          = "go_types"
	SdkHttpJsonServer = "go_httpjson_server"
	SdkHttpJsonClient = "go_httpjson_client"
)

const (
	DataPackage = "package"
	DataName    = "name"
	RootPath    = "gen/"
	Path        = RootPath + "v0/sdk/"
)

var tasks = map[string]types.RenderTask{}

func initSdk(sdk *types.Sdk, data map[string]interface{}) (err error) {
	_, ok := data[DataPackage]
	if !ok {
		err = errors.New("data.package is missing")

		return
	}

	prepareTasks(data, sdk.Dependencies)
	prepareTasks(data, sdk.Tasks)

	return
}

func prepareTasks(data map[string]interface{}, tasks []types.RenderTask) {
	for i, _ := range tasks {
		tasks[i].TemplateData = ptr.String("// generated by metactl sdk gen \n" + *tasks[i].TemplateData)
		tasks[i].Data = data
		tasks[i].Out = ptr.String(Path + *tasks[i].Out)
	}
}

func initServerSdk(sdk *types.Sdk, data map[string]interface{}) (err error) {
	_, ok := data[DataPackage]
	if !ok {
		err = errors.New("data.package is missing")

		return
	}

	_, ok = data[DataName]
	if !ok {
		err = errors.New("data.name is missing")

		return
	}

	prepareTasks(data, sdk.Dependencies)
	prepareTasks(data, sdk.Tasks)

	return
}

func resetSdk() (err error) {
	err = os.RemoveAll(RootPath)
	if err != nil {
		return
	}

	return
}

func GetSdks() []types.Sdk {
	taskSets := map[string][]types.RenderTask{}

	taskSets[TaskSetTypes] = []types.RenderTask{
		tasks[TaskTypes],
		tasks[TaskEnums],
		tasks[TaskUtils],
		tasks[TaskUtilsPtr],
	}

	taskSets[TaskSetHttpJsonClient] = []types.RenderTask{
		tasks[TaskClientInterface],
		tasks[TaskTypedHttpJsonClient],
	}

	taskSets[TaskSetHttpJsonServer] = []types.RenderTask{
		tasks[TaskServiceInterface],
		tasks[TaskTypedHttpJsonServer],
	}

	taskSets[TaskSetHttpJson] = []types.RenderTask{
		tasks[TaskHttpJson],
	}

	taskSets[DependecyRelationNames] = []types.RenderTask{
		{
			TemplateData: tasks[TaskEnums].TemplateData,
			Out:          tasks[TaskEnums].Out,
			Filter: &types.NodeFilters{
				Enums: &graph.Filter{
					Flags: &graph.FlagsSubset{
						Or: []string{enumflags.IsRelationNames},
					},
				},
			},
			Iterate: ptr.String(graph.ENUM),
		},
	}

	taskSets[DependecyLookupService] = []types.RenderTask{
		{
			TemplateData: tasks[TaskTypes].TemplateData,
			Out:          tasks[TaskTypes].Out,
			Dependencies: &types.RenderTaskDependencies{
				Endpoints: &graph.Filter{
					Names: &graph.NamesSubset{
						Or: []string{endpointnames.LookupService},
					},
				},
			},
			Iterate: ptr.String(graph.TYPE),
		},
	}

	return []types.Sdk{
		{
			Name:         SdkTypes,
			Description:  "go types",
			Tasks:        utils.ConcatTaskSets(taskSets[TaskSetTypes]),
			Init:         initSdk,
			Reset:        resetSdk,
			Dependencies: taskSets[DependecyRelationNames],
		},
		{
			Name:         SdkHttpJsonClient,
			Description:  "go client sdk that transports via httpjson",
			Tasks:        utils.ConcatTaskSets(taskSets[TaskSetTypes], taskSets[TaskSetHttpJson], taskSets[TaskSetHttpJsonClient]),
			Init:         initSdk,
			Reset:        resetSdk,
			Dependencies: append(taskSets[DependecyRelationNames], taskSets[DependecyLookupService]...),
		},
		{
			Name:         SdkHttpJsonServer,
			Description:  "go server sdk that transports via httpjson",
			Tasks:        utils.ConcatTaskSets(taskSets[TaskSetTypes], taskSets[TaskSetHttpJson], taskSets[TaskSetHttpJsonServer]),
			Init:         initServerSdk,
			Reset:        resetSdk,
			Dependencies: append(taskSets[DependecyRelationNames], taskSets[DependecyLookupService]...),
		},
	}
}
