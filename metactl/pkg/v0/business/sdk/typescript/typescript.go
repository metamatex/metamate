package typescript

import (
	"github.com/metamatex/metamate/metactl/pkg/v0/types"
	"github.com/metamatex/metamate/metactl/pkg/v0/utils"
	"github.com/metamatex/metamate/metactl/pkg/v0/utils/ptr"
	"github.com/pkg/errors"
	"os"
)

const (
	TaskSetClient = "client"
)

const (
	SdkClient = "typescript-client"
)

const (
	ArgPath = "path"
)

var tasks = map[string]types.RenderTask{}

func initSdk(g *types.SdkGenerator, c types.SdkConfig) (err error) {
	_, ok := c.Args[ArgPath]
	if !ok {
		err = errors.New("data.path is missing")

		return
	}

	prepareTasks(c.Args, g.Dependencies)
	prepareTasks(c.Args, g.Tasks)

	return
}

func prepareTasks(data map[string]interface{}, tasks []types.RenderTask) {
	for i, _ := range tasks {
		tasks[i].TemplateData = ptr.String("// generated by metactl gen \n" + *tasks[i].TemplateData)
		tasks[i].Data = data
		tasks[i].Out = ptr.String(data[ArgPath].(string) + "/" + *tasks[i].Out)
	}
}

func resetSdk(c types.SdkConfig) (err error) {
	err = os.RemoveAll(c.Args[ArgPath].(string) + "/mql_.ts")
	if err != nil {
		return
	}

	return
}

func GetSdks() []types.SdkGenerator {
	taskSets := map[string][]types.RenderTask{}

	taskSets[TaskSetClient] = []types.RenderTask{
		tasks[TaskClient],
	}

	return []types.SdkGenerator{
		{
			Name:        SdkClient,
			Description: "typescript client sdk",
			Tasks:       utils.ConcatTaskSets(taskSets[TaskSetClient]),
			Init:        initSdk,
			Reset:       resetSdk,
		},
	}
}
