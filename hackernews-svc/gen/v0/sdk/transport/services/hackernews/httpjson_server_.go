// generated by metactl sdk gen 
package hackernews

import (
	"encoding/json"
	"github.com/metamatex/metamate/hackernews-svc/gen/v0/sdk"
	"github.com/metamatex/metamate/hackernews-svc/gen/v0/sdk/transport"
	"net/http"
	"reflect"
	
)

type HttpJsonServer struct {
	opts HttpJsonServerOpts
}

type HttpJsonServerOpts struct {
	Service Service
}

func NewHttpJsonServer(opts HttpJsonServerOpts) (http.Handler) {
	return HttpJsonServer{opts: opts}
}

func (s HttpJsonServer) send(w http.ResponseWriter, rsp interface{}) (err error) {
	w.Header().Set(transport.ContentTypeHeader, transport.ContentTypeJson)
	w.Header().Set(transport.MetamateTypeHeader, reflect.TypeOf(rsp).Name())

	err = json.NewEncoder(w).Encode(rsp)
	if err != nil {
	    return
	}

	return
}

func (s HttpJsonServer) getService() (sdk.Service) {
	getFeedsEndpoint := s.opts.Service.GetGetFeedsEndpoint()
	getSocialAccountsEndpoint := s.opts.Service.GetGetSocialAccountsEndpoint()
	getStatusesEndpoint := s.opts.Service.GetGetStatusesEndpoint()

	return sdk.Service{
		Name: sdk.String(s.opts.Service.Name()),
		SdkVersion: sdk.String(sdk.Version),
		Endpoints: &sdk.Endpoints{
			LookupService: &sdk.LookupServiceEndpoint{},
			GetFeeds: &getFeedsEndpoint,
			GetSocialAccounts: &getSocialAccountsEndpoint,
			GetStatuses: &getStatusesEndpoint,
		},
	}
}

func (s HttpJsonServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.Header.Get(transport.MetamateTypeHeader) {
	case sdk.LookupServiceRequestName:
			var req sdk.LookupServiceRequest
			err := json.NewDecoder(r.Body).Decode(&req)
			if err != nil {
				return
			}
	
			svc := s.getService()
			rsp := sdk.LookupServiceResponse{
				Output: &sdk.LookupServiceOutput{
					Service: &svc,
				},
			}
	
			err = s.send(w, rsp)
			if err != nil {
				return
			}
    case sdk.GetFeedsRequestName:
        var req sdk.GetFeedsRequest
        err := json.NewDecoder(r.Body).Decode(&req)
        if err != nil {
            return
        }

        rsp := s.opts.Service.GetFeeds(r.Context(), req)

        err = s.send(w, rsp)
        if err != nil {
            return
        }
    case sdk.GetSocialAccountsRequestName:
        var req sdk.GetSocialAccountsRequest
        err := json.NewDecoder(r.Body).Decode(&req)
        if err != nil {
            return
        }

        rsp := s.opts.Service.GetSocialAccounts(r.Context(), req)

        err = s.send(w, rsp)
        if err != nil {
            return
        }
    case sdk.GetStatusesRequestName:
        var req sdk.GetStatusesRequest
        err := json.NewDecoder(r.Body).Decode(&req)
        if err != nil {
            return
        }

        rsp := s.opts.Service.GetStatuses(r.Context(), req)

        err = s.send(w, rsp)
        if err != nil {
            return
        }
	}
}