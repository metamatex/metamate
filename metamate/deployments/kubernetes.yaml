apiVersion: v1
kind: ServiceAccount
metadata:
  name: metamate
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: read-services
rules:
  - apiGroups: [""]
    resources: ["services",]
    verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: metamate-read-services
  namespace: default
subjects:
  - kind: ServiceAccount
    name: metamate
roleRef:
  kind: Role
  name: read-services
  apiGroup: rbac.authorization.k8s.io
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: metamate-config
data:
  metamate.yaml: |-
    discoverySvc:
      endpoints:
        getServices: {}
        lookupService: {}
      id:
        serviceName: metamate
        value: discovery
      isVirtual: true
      transport: httpJson
      url:
        value: http://discovery
    authSvcFilter:
      id:
        value:
          is: auth
    defaultClientAccount:
      id:
        value: default
    endpoints:
      admin:
        "on": true
      config:
        "on": true
      prometheus:
        "on": true
      debug:
        "on": true
      graphql:
        "on": true
      graphiqlExplorer:
        "on": true
      httpJson:
        "on": true
    host:
      bind: 0.0.0.0
      domain: metamate.one
      httpsOn: false
      allowedOrigins:
      - '*'
    log:
      http: true
      internal:
        ClientRequest:
          "*": "{{ .Ctx.GCliReq.Type.Name }}"
        ServiceRequest:
          "*": "{{ .Ctx.Svc.Url.Value }} : \n{{ .Ctx.GSvcReq.Type.Name }}\n{{ .Ctx.GSvcReq.Sprint }}\n\n{{ .Ctx.GSvcRsp.Type.Name }}\n{{ .Ctx.GSvcRsp.Sprint }}"
        ServiceResponse:
          "*": "{{ .Ctx.Svc.Url.Value }} : \n{{ .Ctx.GSvcReq.Type.Name }}\n{{ .Ctx.GSvcReq.Sprint }}\n\n{{ .Ctx.GSvcRsp.Type.Name }}\n{{ .Ctx.GSvcRsp.Sprint }}"
    virtual:
      services:
      - id: auth
        name: auth
        opts:
          auth:
            privateKey: |-
              -----BEGIN RSA PRIVATE KEY-----
              MIICXQIBAAKBgQDeY78Tls1xmM0QMNbddASMFOvyHkxTkiItSULcaLL4Q4Wr9SxT
              5t79OMkj+0DtkKnzqu+aoqL/M09sImY26nMH/uTX3jRwEqx9tfP7j/H8PHPQHZKn
              jQbRkNN8Mf6zS6lbWO6mfCaCqZ2D0SmG6T2h4sqmTynvVJGVxZeiLALcTwIDAQAB
              AoGBAJIVX6zUgLvALeQW0O3DikEidSMkd+rlsYGiAEOcmwOuBx6//JBYtd4M8UOr
              hikHwDwJ6z7e2sdcwy07I32rYEeE0PrOoGfPypRWjZHnpbuXrLTIylEF3czTmXWb
              dY1+mLSCaYMsu9uz9CX91Q8YkMAkhoWExQOJZX34641Tup/hAkEA8RnIZyKxjPGe
              y2zdZk/utvG7Fvd0DpPEnUehoTEHbyHfdtGQOuyk3EHSya80DfPro0h0oit8bwmL
              HEW/VHgT1wJBAOwh9DhinXJFPCC8wNFmYKVwgFc2ImDs/KZARAE7/IstzZIVoeQJ
              fpAfCWtQho7vUdzBfTaeR2y6Ai3cJHj97EkCQFfFHRF+rcgzha1kmkzOuIZdBdDc
              kKFl5eOj2hFGOgCZAjLNI4Zv86xDQist3vNdYuD0VZFb51a80KmgMoDbnc0CQQCc
              93Et7jf1VxrCNFcEm8aREzjtQFoYDlFgfoX2QBb/ueHWQzULrlgIm+kaAjyAVYwY
              cDK5FPwrxXZfX+CK4VipAkBcwIKylFV+KKM/c9c85MfimGUGQBcWnfTuYcntaUpq
              IGUaBYoax4+5UfqS8Mhk2U5Pr3YiJqY91pCQsys4CrJU
              -----END RSA PRIVATE KEY-----
            salt: abc
      - id: sqlx-a
        name: sqlx
        opts:
          sqlx:
            driver: sqlite3
            connection: ':memory:'
            types:
            - ClientAccount
            - ServiceAccount
            - BlueWhatever
            - Whatever
      - id: sqlx-b
        name: sqlx
        opts:
          sqlx:
            driver: sqlite3
            connection: ':memory:'
            types:
            - ClientAccount
            - ServiceAccount
            - BlueWhatever
            - Whatever
      - id: mastodon
        name: mastodon
        opts:
          mastodon:
            host: https://mastodon.social
            clientId: tac-RigLyTKxOJoadxRhkKz2qN4kkUal61G-UoFCGHg
            clientSecret: hyx3PLEuTvy-NKFBPGcWutQlphOjAbZOfx6cWPlbBn4
      - id: hackernews
        name: hackernews
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metamate
spec:
  replicas: 1
  selector:
    matchLabels:
      name: metamate
  template:
    metadata:
      labels:
        name: metamate
    spec:
      serviceAccountName: metamate
      containers:
        - name: metamate
          image: metamatex/metamate:latest
          command: ["./metamate"]
          args: ["serve", "-c", "/metamate.yaml"]
          imagePullPolicy: Always
          volumeMounts:
            - name: config
              mountPath: /metamate.yaml
              subPath: metamate.yaml
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: metamate-config
---
apiVersion: v1
kind: Service
metadata:
  name: metamate
spec:
  selector:
    name: metamate
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443